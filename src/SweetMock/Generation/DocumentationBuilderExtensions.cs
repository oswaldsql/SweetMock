namespace SweetMock.Generation;

using Utils;

internal static class DocumentationBuilderExtensions
{
    private const bool Disable = false;

    public static CodeBuilder Documentation(this CodeBuilder builder, Action<DocumentationBuilder> build)
    {
        if (!Disable)
        {
            var t = new DocumentationBuilder(builder);
            build(t);
        }

        return builder;
    }

    public static DocumentationBuilder Summary(this DocumentationBuilder doc, params string[] summaries)
    {
        doc.Builder.Add("/// <summary>");
        foreach (var summary in summaries)
        {
            doc.Builder.Add("///    " + summary);
        }

        doc.Builder.Add("/// </summary>");

        return doc;
    }

    public static DocumentationBuilder Parameter(this DocumentationBuilder doc, string name, string description, bool condition = true)
    {
        if (condition)
        {
            doc.Builder.Add($"/// <param name=\"{name}\">{description}</param>");
        }

        return doc;
    }

    public static DocumentationBuilder Parameter<T>(this DocumentationBuilder doc, IEnumerable<T> source, Func<T, string> name, Func<T, string> description)
    {
        foreach (var s in source)
        {
            doc.Parameter(name(s), description(s));
        }

        return doc;
    }

    public static void Returns(this DocumentationBuilder doc, string description) =>
        doc.Builder.Add($"/// <returns>{description}</returns>");

    public static CodeBuilder AddFileHeader(this CodeBuilder source) =>
        source
            .Add($"// This file was auto-generated by SweetMock {SourceGeneratorMetadata.Version} at {DateTimeOffset.Now:u}")
            .Add("// Changes to this file may be lost when the code is regenerated.")
            .AddLineBreak();

    public static CodeBuilder AddGeneratedCodeAttrib(this CodeBuilder source) =>
        source.Add($"[System.CodeDom.Compiler.GeneratedCode(\"SweetMock\",\"{SourceGeneratorMetadata.Version}\")]");
}
