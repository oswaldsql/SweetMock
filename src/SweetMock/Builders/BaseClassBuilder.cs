namespace SweetMock.Builders;

using System;
using System.Linq;
using MemberBuilders;
using Utils;

internal class BaseClassBuilder
{
    private static readonly IBaseClassBuilder[] Builders = [new ConstructorBuilder(), new EventBuilder(), new PropertyBuilder(), new IndexBuilder(), new MethodBuilder(), new BackstopBuilder()];
    
    public CodeBuilder Build(MockDetails details)
    {
        var result = new CodeBuilder();
        var documentationName = details.Target.ToCRef();
        
        result.Add($$"""
                     // Generated by SweetMock {{SourceGeneratorMetadata.Version}} on {{DateTimeOffset.Now:u}}
                     #nullable enable
                     namespace {{details.Namespace}}
                     {
                     ->
                     /// <summary>
                     /// Mock implementation of <see cref="{{documentationName}}"/>. Should only be used for testing purposes.
                     /// </summary>
                     [System.CodeDom.Compiler.GeneratedCode("SweetMock","{{SourceGeneratorMetadata.Version}}")]
                     internal class {{details.MockType}} : {{details.SourceName}} {{details.Constraints}}
                     {
                     ->
                     #region Configuration
                     ->
                     private Config _config { get; }

                     /// <summary>
                     /// Configuration class for the mock.
                     /// </summary>
                     internal partial class Config
                     {
                         private readonly {{details.MockType}} target;
                     
                         /// <summary>
                         /// Initializes a new instance of the <see cref="T:Config"/> class.
                         /// </summary>
                         /// <param name="target">The target mock class.</param>
                         public Config({{details.MockType}} target)
                         {
                             this.target = target;
                         }
                     }
                     <-
                     #endregion
                     """);

        result.Add(LogBuilder.InitializeLogging());

        result.Add(BuildMembers(details));

        result.Add("""
                    <-
                    }
                    <-
                    }
                    """);
        
        return result;
    }

    private CodeBuilder BuildMembers(MockDetails details)
    {
        var result = new CodeBuilder();

        var members = details.GetMembers();

        if (members.All(t => t.Key != ".ctor"))
        {
            result.Add(ConstructorBuilder.BuildEmptyConstructor(details));
        }
        
        foreach (var member in members)
        {
            var wasAdded = Builders.FirstOrDefault(t => t.TryBuildBase(details, result, member.ToArray()));
            
            if (wasAdded == null)
            {
                result.Add($"// {member.Key} was not handled {member.First()}");
            }
        }
        
        return result;
    }
}