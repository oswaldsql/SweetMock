// ReSharper disable EnforceIfStatementBraces
// ReSharper disable HeuristicUnreachableCode

namespace SweetMock.Builders;

using System;
using System.Collections.Generic;
using Utils;

internal class DocumentationBuilder(CodeBuilder builder)
{
    public CodeBuilder Builder { get; } = builder;
}

internal static class DocumentationBuilderExtensions
{
    private const bool Disable = false;

    public static CodeBuilder Documentation(this CodeBuilder builder, Action<DocumentationBuilder> build)
    {
        if (!Disable)
        {
            var t = new DocumentationBuilder(builder);
            build(t);
        }

        return builder;
    }

    public static DocumentationBuilder Summary(this DocumentationBuilder source, params string[] summaries)
    {
        source.Builder.Add("/// <summary>");
        foreach (var summary in summaries)
        {
            source.Builder.Add("///    " + summary);
        }

        source.Builder.Add("/// </summary>");

        return source;
    }

    public static DocumentationBuilder Parameter(this DocumentationBuilder source, string name, string description, bool condition = true)
    {
        if (condition)
            source.Builder.Add($"/// <param name=\"{name}\">{description}</param>");
        return source;
    }

    public static DocumentationBuilder Parameter<T>(this DocumentationBuilder builder, IEnumerable<T> source, Func<T, string> name, Func<T, string> description)
    {
        foreach (var s in source)
        {
            builder.Parameter(name(s), description(s));
        }

        return builder;
    }

    public static DocumentationBuilder Returns(this DocumentationBuilder source, string description)
    {
        source.Builder.Add($"/// <returns>{description}</returns>");

        return source;
    }

    public static CodeBuilder AddFileHeader(this CodeBuilder source)
    {
        if (!Disable)
        {
            source.Add($"// Generated by SweetMock {SourceGeneratorMetadata.Version} on {DateTimeOffset.Now:u}");
        }

        return source;
    }

    public static CodeBuilder AddGeneratedCodeAttrib(this CodeBuilder source) =>
        source.Add($"[System.CodeDom.Compiler.GeneratedCode(\"SweetMock\",\"{SourceGeneratorMetadata.Version}\")]");

    public static SurroundingCodeBuilder AddToConfig(this CodeBuilder source) =>
        new(source, "internal partial class Config {", "}");
}
